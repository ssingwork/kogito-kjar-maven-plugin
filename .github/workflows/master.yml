name: master
on:
  push:
    branches:
    - 'master'
    paths:
    - 'src/**'
    - 'pom.xml'

env:
  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"

jobs:
  check-version:
    name: check SNAPSHOT version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Export project version
      uses: ./.github/actions/export-project-version
    - name: Check version is SNAPSHOT
      run: |
        echo $PROJECT_VERSION | egrep '^([0-9]+\.){1,2}([0-9]+(-SNAPSHOT))?$'

  install:
    name: install
    runs-on: ubuntu-latest
    needs: check-version
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup Java 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Setup cache
      uses: actions/cache@v1
      with:
        path: .m2/repository/
        key: ${{ github.ref }}
    - name: Install dependencies
      id: install
      run: mvn $MVN_CLI_OPTS clean install
    - uses: 8398a7/action-slack@v2
      with:
        status: ${{ job.status }}
        author_name: ${{ github.actor }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()

  lint:
    name: lint
    runs-on: ubuntu-latest
    needs: install
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup Java 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Setup cache
      uses: actions/cache@v1
      with:
        path: .m2/repository/
        key: ${{ github.ref }}
    - name: Lint code
      run: mvn $MVN_CLI_OPTS checkstyle:checkstyle
    - uses: 8398a7/action-slack@v2
      with:
        status: ${{ job.status }}
        author_name: ${{ github.actor }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()

  test:
    name: test
    runs-on: ubuntu-latest
    needs: install
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup Java 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Setup cache
      uses: actions/cache@v1
      with:
        path: .m2/repository/
        key: ${{ github.ref }}
    - name: Run tests
      run: mvn $MVN_CLI_OPTS test
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: target/site/jacoco/jacoco.xml
        flags: unittests
        name: jacoco-report
        yml: ./codecov.yml
        fail_ci_if_error: true
    - name: Upload test reports
      uses: actions/upload-artifact@v1
      with:
        # https://github.com/actions/upload-artifact/issues/11
        name: surefire-reports
        path: target/surefire-reports
    - uses: 8398a7/action-slack@v2
      with:
        status: ${{ job.status }}
        author_name: ${{ github.actor }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()

  quality:
    name: SonarCloud Trigger
    runs-on: ubuntu-latest
    needs: test
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_URL: https://sonarcloud.io
    steps:
    - uses: actions/checkout@v2
    - name: Setup Java 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Setup cache
      uses: actions/cache@v1
      with:
        path: .m2/repository/
        key: ${{ github.ref }}
    - name: Download surefire reports
      uses: actions/download-artifact@v1
      with:
        name: surefire-reports
        path: target/surefire-reports
    - name: SonarCloud Scan
      run: |
        mvn $MVN_CLI_OPTS verify sonar:sonar \
          -Dsonar.host.url=$SONAR_URL \
          -Dsonar.login=$SONAR_TOKEN \
          -Dsonar.organization=welldsagl \
          -Dsonar.projectKey=welldsagl_drools-gdst-to-drl \
          -DskipTests \
          -Ddependency-check.skip=true
    - uses: 8398a7/action-slack@v2
      with:
        status: ${{ job.status }}
        author_name: ${{ github.actor }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()

  build:
    name: build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup Java 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Export project version
      uses: ./.github/actions/export-project-version
    - name: Setup cache
      uses: actions/cache@v1
      with:
        path: .m2/repository/
        key: ${{ github.ref }}
    - name: Build the project
      run: mvn $MAVEN_CLI_OPTS package -DskipTests
    - name: Upload build artifacts
      uses: actions/upload-artifact@v1
      with:
        name: welld-drools-maven-plugin
        path: target/welld-kogito-kjar-maven-plugin-${{ env.PROJECT_VERSION }}.jar
    - uses: 8398a7/action-slack@v2
      with:
        status: ${{ job.status }}
        author_name: ${{ github.actor }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()

  prerelease:
    name: prerelease
    runs-on: ubuntu-latest
    needs: [build, quality]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Export project version
      uses: ./.github/actions/export-project-version
    - name: Download build artifacts
      uses: actions/download-artifact@v1
      with:
        name: welld-drools-maven-plugin
        path: target/
    - name: Create prerelease
      uses: marvinpinto/action-automatic-releases@latest
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest"
        prerelease: true
        title: Prerelease ${{ env.PROJECT_VERSION }}
        files: |
          LICENSE
          target/*.jar
    - uses: 8398a7/action-slack@v2
      with:
        status: ${{ job.status }}
        author_name: ${{ github.actor }}
        text: Prerelease 'latest' created on Github.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: success()

  publish:
    name: publish
    runs-on: ubuntu-latest
    needs: [build, quality]
    env:
      SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
      SONATYPE_PWD: ${{ secrets.SONATYPE_PWD }}
      GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Setup Java 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Export project version
      uses: ./.github/actions/export-project-version
    - name: Setup cache
      uses: actions/cache@v1
      with:
        path: .m2/repository/
        key: ${{ github.ref }}
    - name: Download build artifacts
      uses: actions/download-artifact@v1
      with:
        name: welld-drools-maven-plugin
        path: target/
    - name: Publish on Maven Central
      run: mvn $MAVEN_CLI_OPTS deploy -DskipTests -Ddependency-check.skip=true
    - uses: 8398a7/action-slack@v2
      with:
        status: ${{ job.status }}
        author_name: ${{ github.actor }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()
    - uses: 8398a7/action-slack@v2
      with:
        status: ${{ job.status }}
        author_name: ${{ github.actor }}
        text: Version ${{ env.PROJECT_VERSION }} released on Maven Central.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: success()


    


